{"version":3,"sources":["components/Explanation.js","components/Image.js","components/Main.js","api.js","App.js","serviceWorker.js","index.js"],"names":["ExplanationGrid","styled","div","Explanation","textExplanation","useState","explanation","setExplanation","useEffect","timer","setTimeout","clearTimeout","CustomImage","img","url","Image","image","setImage","Copyright","h4","Container","flip","Main","setFlip","title","media_type","copyright","date","data","setData","a","axios","get","result","CircleType","document","getElementById","radius","id","toUpperCase","onClick","autoPlay","src","type","App","className","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u6BAGA,IAAMA,EAAkBC,IAAOC,IAAV,KAyCNC,EAbK,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAAsB,EACLC,oBAAS,GADJ,mBACpCC,EADoC,KACvBC,EADuB,KAU3C,OAPAC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACrBH,GAAe,KAChB,KACH,OAAO,kBAAMI,aAAaF,MACzB,IAEIH,GAAe,kBAACN,EAAD,KAAiB,2BAAII,K,yjBCtC7C,IAAMQ,EAAcX,IAAOY,IAAV,KAIG,qBAAEC,OAqCPC,EAbD,SAAC,GAAa,IAAXD,EAAU,EAAVA,IAAU,EACCT,oBAAS,GADV,mBAClBW,EADkB,KACXC,EADW,KAUzB,OAPAT,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBO,GAAS,KACR,KACH,OAAO,kBAAMN,aAAaF,MACzB,IAEIO,GAAS,kBAACJ,EAAD,CAAaE,IAAKA,K,6eCjCpC,IAAMI,EAAYjB,IAAOkB,GAAV,KAOTC,EAAYnB,IAAOC,IAAV,KAMQ,qBAAGmB,KAAkB,UAAY,UAyCzCC,EAlCF,WAAO,IAAD,EACOjB,oBAAS,GADhB,mBACVgB,EADU,KACJE,EADI,OAEOlB,mBAAS,CAC/BmB,MAAO,GACPlB,YAAa,GACbQ,IAAK,GACLW,WAAY,GACZC,UAAW,GACXC,KAAM,KARS,mBAEVC,EAFU,KAEJC,EAFI,KAWjBrB,oBAAS,sBAAC,4BAAAsB,EAAA,sECpCHC,IAAMC,IAAI,gGDoCP,OACFC,EADE,OAERJ,EAAQI,EAAOL,MACf,IAAIM,IAAWC,SAASC,eAAe,UAAUC,OAAO,KAHhD,2CAIP,IAEH,OAAO,oCACL,wBAAIC,GAAG,UACHV,EAAKJ,OAAS,QAAQe,eAEL,UAApBX,EAAKH,YACJ,kBAACL,EAAD,CAAWoB,QAAS,kBAAMjB,GAASF,IAAOA,KAAMA,EAAO,EAAI,GACzD,kBAAC,EAAD,CAAOP,IAAKc,EAAKd,MACjB,kBAAC,EAAD,CAAaV,gBAAiBwB,EAAKtB,eAGvC,kBAACY,EAAD,MAAaU,EAAKF,WAAa,QAAQa,eACvC,2BAAOE,UAAQ,GACb,4BAAQC,IAAI,qBAAqBC,KAAK,kBE/C7BC,G,MANH,kBACV,yBAAKC,UAAU,OACb,kBAAC,EAAD,SCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASC,eAAe,SD2H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1a9f296c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst ExplanationGrid = styled.div`\n  display: flex;\n  color: white;\n  overflow-wrap: break-word;\n  cursor: pointer;\n  position: absolute;\n  box-shadow: 0 0 5px 3px #333333;\n  background-color: black;\n  background-size: cover;\n  border-radius: 60% 60% 60% 60%;\n  width: 500px;\n  height: 500px;\n  backface-visibility: hidden;\n  z-index: 1;\n  transform: rotateY(180deg);\n  animation: fadein 4s;\n\n  p {\n    text-align: center;\n    margin: auto;\n  }\n\n  @keyframes fadein {\n    from { width: 0; height: 0; }\n    to   { width: 500px; height: 500px; }\n  }\n`;\n\nconst Explanation = ({ textExplanation }) => {\n  const [explanation, setExplanation] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n        setExplanation(true);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return explanation && <ExplanationGrid><p>{textExplanation}</p></ExplanationGrid>;\n};\n\nexport default Explanation;","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst CustomImage = styled.img`\n  cursor: pointer;\n  position: absolute;\n  box-shadow: 0 0 5px 3px #333333;\n  background: url(${({url}) => url});\n  background-size: cover;\n  border-radius: 60% 60% 60% 60%;\n  width: 500px;\n  height: 500px;\n  backface-visibility: hidden;\n  z-index: 2;\n  animation: fadein 4s;\n\n  @keyframes fadein {\n    from { width: 0; height: 0; }\n    to   { width: 500px; height: 500px; }\n  }\n\n  @keyframes pulse {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n`;\n\nconst Image = ({ url }) => {\n  const [image, setImage] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setImage(true);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return image && <CustomImage url={url} />;\n};\n\nexport default Image;","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Playlist from 'react-mp3-player';\nimport CircleType from 'circletype';\nimport { getNasaInfo } from '../api.js';\nimport Explanation from './Explanation.js';\nimport Image from './Image.js';\n\nconst Copyright = styled.h4`\n  position: absolute;\n  color: #ffffff;\n  bottom: 0px;\n  right: 25px;\n`;\n\nconst Container = styled.div`\n  transition: transform 4s ease-in-out;\n  transform-style: preserve-3d;\n  position: absolute;\n  display: flex;\n  top: 50%;\n  transform: rotateY(${({ flip }) => flip ? '1980deg' : '0deg'});\n  width: -webkit-fill-available;\n  height: -webkit-fill-available;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Main = () => {\n  const [flip, setFlip] = useState(false);\n  const [data, setData] = useState({\n    title: '',\n    explanation: '',\n    url: '',\n    media_type: '',\n    copyright: '',\n    date: '',\n  });\n\n  useEffect(async () => {\n    const result = await getNasaInfo();\n    setData(result.data);\n    new CircleType(document.getElementById('title')).radius(330);\n  }, []);\n  const tracks = [{ name:'', desc: 'Description 1', src:''}]\n  return <>\n    <h2 id=\"title\">\n      {(data.title || 'NASA').toUpperCase()}\n    </h2>\n    {data.media_type === 'image' && \n      <Container onClick={() => setFlip(!flip)} flip={flip ? 1 : 0}>\n        <Image url={data.url} />\n        <Explanation textExplanation={data.explanation} />\n      </Container>\n    }\n    <Copyright>{(data.copyright || 'NASA').toUpperCase()}</Copyright>\n    <audio autoPlay>\n      <source src=\"./Interstellar.mp3\" type=\"audio/mpeg\" />\n    </audio>\n  </>;\n};\n\nexport default Main;","import axios from 'axios';\n\nexport const  getNasaInfo = () => {\n  return axios.get('https://api.nasa.gov/planetary/apod?api_key=3Y4LUMMgcVLsrMgDie1gFLcf5okBmVBeg8W6cTdQ&hd=true');\n}","import React from 'react';\nimport Main from './components/Main';\nimport './styles/wikiBody.css'\n\nconst App = () => (\n  <div className=\"App\">\n    <Main />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}